---
#- name: Create the docker secrets for private registry
#  command: >
#    oc secrets new-dockercfg private-registry
#    --docker-server={{ demo_private_registry_url }}
#    --docker-username={{ demo_private_registry_user }}
#    --docker-password={{ demo_private_registry_password }}
#    --docker-email={{ demo_private_registry_email }}
#    -n {{ item }}
#  with_items: "{{ demo_pipeline_projects | union(['openshift']) }}"
#  register: registry_secrets
#  failed_when: "{{ registry_secrets.rc == 1 and 'already exists' not in registry_secrets.stderr }}"
#  changed_when: "{{ registry_secrets.rc == 0 }}"
#
#- name: Create imagestreams for private registry images
#  command: >
#    oc import-image {{ item.name }} --from {{ demo_private_registry_url }}{{ item.image }} --confirm -n openshift
#  with_items: "{{ demo_private_registry_images }}"
#  failed_when: false

- name: Create the pipeline builder SA
  shell: >
    echo '{"kind": "ServiceAccount", "apiVersion": "v1", "metadata": {"name": "pipeline-builder", "namespace": "default" }}' | oc create -f -
  register: create_sa
  changed_when: create_sa.rc == 0
  failed_when: "create_sa.rc == 1 and 'already exists' not in create_sa.stderr"

- name: Add the system:image-puller role
  command: >
    oadm policy add-cluster-role-to-user system:image-puller system:serviceaccount:default:pipeline-builder
  when: create_sa | changed

# TODO: determine the proper permissions rather than adding cluster-admin
- name: Add the cluter-admin role
  command: >
    oadm policy add-cluster-role-to-user cluster-admin system:serviceaccount:default:pipeline-builder
  when: create_sa | changed

- name: Create the jenkins project
  command: oadm new-project jenkins
  register: jenkins_project
  failed_when: "{{ jenkins_project.rc == 1 and 'already exists' not in jenkins_project.stderr }}"
  changed_when: "{{ jenkins_project.rc == 0 }}"

- name: Create projects
  command: oadm new-project {{ item }}
  with_items: "{{ demo_pipeline_projects }}"
  register: pipeline_projects
  failed_when: "{{ pipeline_projects.rc == 1 and 'already exists' not in pipeline_projects.stderr }}"
  changed_when: "{{ pipeline_projects.rc == 0 }}"

- name: Add admin users to projects
  command: oc policy add-role-to-user admin {{ item.1 }} -n {{ item.0 }}
  with_nested:
  - "{{ demo_pipeline_projects }}"
  - "{{ demo_pipeline_project_admin }}"

- name: Add view users to projects
  command: oc policy add-role-to-user view {{ item.1 }} -n {{ item.0 }}
  with_nested:
  - "{{ demo_pipeline_projects }}"
  - "{{ demo_pipeline_project_view }}"

- name: Create the git secret
  command: oc secrets new-basicauth git-secret --username={{ demo_pipeline_github_user }} --password={{ demo_pipeline_github_password }} -n {{ item }}
  with_items:
  - "{{ demo_pipeline_projects.0 }}"
#  - jenkins
  register: git_secret
  failed_when: "{{ git_secret.rc == 1 and 'already exists' not in git_secret.stderr }}"
  changed_when: "{{ git_secret.rc == 0 }}"

- name: Add the git secret to the builder service account
  command: oc secrets add serviceaccount/builder secrets/git-secret -n {{ item }}
  with_items:
  - "{{ demo_pipeline_projects.0 }}"
#  - jenkins
  register: add_git_secret

#- name: Create the buildconfig for jenkins
#  shell: >
#    echo {{ lookup('template', 'templates/jenkins-is-bc.yml') | from_yaml | to_json | quote }} | oc create -n jenkins -f -
#  register: jenkins_bc
#  changed_when: jenkins_bc.rc == 0
#  failed_when: "jenkins_bc.rc == 1 and 'already exists' not in jenkins_bc.stderr"
#
#- pause:
#    minutes: 2
#  when: jenkins_bc | changed
#
#- name: Gather the generated secret names
#  command: "oc get sa pipeline-builder -o jsonpath='{.secrets[*].name}'"
#  register: pipeline_secret_names
#  changed_when: false
#
#- name: Get the SA token secret
#  command: "oc get secret {{ pipeline_secret_names.stdout }} -o jsonpath='{range .items[?(@.data.token)]}{.data.token}{end}'"
#  changed_when: false
#  when: pipeline_secret_names.stdout != ''
#  register: pipeline_token
#
#- name: Create the jenkins app
#  shell: >
#    echo {{ lookup('template', 'templates/jenkins-app.yml') | from_yaml | to_json | quote }} | oc create -n jenkins -f -
#  register: jenkins_app
#  changed_when: jenkins_app.rc == 0
#  failed_when: "jenkins_app.rc == 1 and 'already exists' not in jenkins_app.stderr"
#
#- debug: var=jenkins_app
